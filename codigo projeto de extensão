#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Define o endereço I2C do LCD 16x2 (normalmente 0x27 ou 0x3F)
#define I2C_ADDR 0x27

// Define as dimensões do LCD (16 colunas por 2 linhas)
#define LCD_COLS 16
#define LCD_ROWS 2

// Inicializa o objeto do LCD I2C com o endereço e as dimensões definidas
LiquidCrystal_I2C lcd(I2C_ADDR, LCD_COLS, LCD_ROWS);

// Pinos do sensor de presença e do buzzer
const int PIR_PIN = 2;
const int BUZZER_PIN = 3;

// Variáveis de controle do tempo
unsigned long startTime = 0;
unsigned long elapsedTime = 0;
unsigned long totalOperatingTime = 0;
bool motorRunning = false;
bool maintenanceDue = false;
const unsigned long maintenanceInterval = 1000 * 60 * 60 * 100; // 100 horas em milissegundos

void setup() {
  // Inicializa o sensor de presença PIR e o buzzer
  pinMode(PIR_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  // Inicializa o LCD
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Esperando...");
}

void loop() {
  int sensorValue = digitalRead(PIR_PIN);
  
  if (sensorValue == HIGH) { // Motor ligado
    if (!motorRunning) {
      motorRunning = true;
      startTime = millis() - elapsedTime; // Ajusta o startTime para continuar a contagem
    } else {
      elapsedTime = millis() - startTime;
      displayTime(elapsedTime);
      if (elapsedTime + totalOperatingTime >= maintenanceInterval) {
        maintenanceDue = true;
        alertMaintenance();
      }
    }
  } else { // Motor desligado
    if (motorRunning) {
      motorRunning = false;
      totalOperatingTime += elapsedTime;
      elapsedTime = 0;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Motor Parou");
      delay(2000);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Esperando...");
    }
  }

  if (maintenanceDue) {
    alertMaintenance();
  }
}

void displayTime(unsigned long time) {
  unsigned long seconds = (time / 1000) % 60;
  unsigned long minutes = (time / (1000 * 60)) % 60;
  unsigned long hours = (time / (1000 * 60 * 60)) % 24;

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Tempo:");
  lcd.setCursor(0, 1);
  lcd.print(hours);
  lcd.print(":");
  if (minutes < 10) lcd.print("0");
  lcd.print(minutes);
  lcd.print(":");
  if (seconds < 10) lcd.print("0");
  lcd.print(seconds);
}

void alertMaintenance() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Revisao Necessaria");
  tone(BUZZER_PIN, 1000); // Emite um som de 1kHz
  delay(2000);
  noTone(BUZZER_PIN);
}
